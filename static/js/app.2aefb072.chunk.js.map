{"version":3,"sources":["facade.js","components/ButtonComponent.js","UploadScreen.js","App.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","downloadUrl","a","async","getDownloadURL","ref","storage","result","this","app","initializeApp","getStorage","StyleSheet","create","container","width","aspectRatio","textAlign","alignItems","flexDirection","glassBackground","backgroundColor","opacity","borderRadius","height","position","top","right","zIndex","circle","marginRight","alignSelf","marginLeft","number","fontSize","fontWeight","color","buttonText","UploadScreen","list","i","push","console","log","useState","randBlue","Math","floor","random","randRed","randGreen","length","toString","useRef","Animated","Value","current","setScrollState","listRendered","materialList","React","createRef","View","style","FlatList","onScroll","event","nativeEvent","contentOffset","y","measure","fx","fy","px","py","data","inverted","renderItem","item","index","marginBottom","Text","left","flex","selectButton","justifyContent","uploadButton","marginTop","imageContainer","progressBarContainer","imageBox","App","StatusBar","barStyle"],"mappings":"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","file":"static/js/app.2aefb072.chunk.js","sourcesContent":["import { getStorage, ref, getDownloadURL } from \"firebase/storage\";\n\nimport { initializeApp } from \"firebase/app\";\n\nimport React, { useState } from 'react';\n\nimport * as ImagePicker from 'expo-image-picker';\nimport storage from '@react-native-firebase/storage';\n//import * as Progress from 'react-native-progress';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDUb8WY1JbYORkE03k4PsJ7PfpDAKAr_aY\",\n    authDomain: \"medicbook-ios.firebaseapp.com\",\n    databaseURL: \"https://medicbook-ios-default-rtdb.firebaseio.com\",\n    projectId: \"medicbook-ios\",\n    storageBucket: \"medicbook-ios.appspot.com\",\n    messagingSenderId: \"413894118278\",\n    appId: \"1:413894118278:web:da6c43267e2b7b6ba1fa07\",\n    measurementId: \"G-63DPJ28BCY\"\n  };\n\n\nclass Facade{\n    constructor(){\n        this.app = initializeApp(firebaseConfig);\n        this.storage = getStorage();\n        \n        //this.storage = getStorage(this.app);\n        \n    }\n\n    downloadUrl = async () => {\n        let result = await getDownloadURL(ref(this.storage, 'DentalMaterials/החייאת בקרת נזקים בשדהx.pdf'))\n        return result\n    }\n}\n\nlet facade = new Facade()\nexport default facade;","import {View, Text, StyleSheet, TouchableOpacity} from 'react-native'\n\nexport default function ButtonComp(props){\n    let randBlue = Math.floor(Math.random() * 256)\n    let randRed = Math.floor(Math.random() * 256) \n    let randGreen = Math.floor(Math.random() * 256)\n    return (\n            <View style={{width: '100%',\n            aspectRatio: 7,\n            overflow: 'hidden',\n            right: 0,\n            marginTop: 10,\n            //backgroundColor: 'cyan',\n            right: 0,\n            top: 64 * props.num,\n            position: 'absolute',\n            \n\n            \n                }}>\n                <TouchableOpacity style={[styles.container, {marginLeft: 20 + props.num * 2}]}>\n                    <View style={[styles.circle, {backgroundColor: props.bgc } ]}/>\n                    \n                    <View style={[styles.glassBackground]}></View>\n                    \n                    <Text style={styles.buttonText}>Default Comp</Text>\n                \n                </TouchableOpacity>\n            </View>\n            \n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n      width: '120%',\n      \n      \n      aspectRatio: 9,\n      textAlign: 'center',\n      \n      //display: 'flex',\n      //justifyContent: 'center',\n      alignItems: 'flex-start',\n      flexDirection: 'row',\n      \n      \n      \n    },\n    \n    glassBackground: {\n        backgroundColor: '#e4eeff',\n        opacity: 0.8,\n        borderRadius: 150,\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        top: 0, right: 0,\n        zIndex: 2,\n\n    },\n    \n    circle: {\n        borderRadius: '150%',\n        height: '80%',\n        aspectRatio: 1,\n        backgroundColor: '#eaa1ff',\n        marginRight: 10,\n        zIndex: 3,\n        alignSelf: 'center',\n        marginLeft: 3,\n        marginRight: '10%',\n    },\n\n    number : {\n        fontSize: 40, \n        fontWeight: 'bold', \n        color: 'black',\n        marginRight: 20,\n        zIndex: 3,\n        alignSelf: 'center'\n    },\n    \n    buttonText: {\n        fontSize: 15,\n        fontWeight: 'bold',\n        color: '#060606',\n        zIndex: 3,\n        alignSelf: 'center'\n    }\n})","import facade from \"./facade\";\nimport {\n  View,\n  SafeAreaView,\n  Text,\n  TouchableOpacity,\n  StyleSheet,\n  Platform,\n  Alert,\n  Image,\n  Animated,\n  FlatList\n} from 'react-native';\nimport React, {useEffect, useState, useRef} from 'react'\nimport ButtonComp from './components/ButtonComponent'\nimport {Page, Document} from 'react-pdf';\n\n\n\n\n\n//const pickImage = async () => {\n//  // No permissions request is necessary for launching the image library\n//  let result = await ImagePicker.launchImageLibraryAsync({\n//    mediaTypes: ImagePicker.MediaTypeOptions.All,\n//    allowsEditing: true,\n//    aspect: [4, 3],\n//    quality: 1,\n//  });\n//\n//  console.log(result);\n//\n//  if (!result.cancelled) {\n//    setImage(result.uri);\n//  }\n//};\n\n// Import the functions you need from the SDKs you need\n\n\n\n\n\nexport default function UploadScreen() {\n  function getUrl(){\n    let topic = \"trauma\"\n    let material = \"מנהלתי- נוהל הפניות חריגות\"\n\n    let firebaseStorageApi = \"https://storage.googleapis.com/medicbook-ios.appspot.com/Anatomy/%D7%94%D7%92%D7%99%D7%A9%D7%94%20%D7%9C%D7%A4%D7%A6%D7%99%D7%A2%D7%95%D7%AA%20%D7%97%D7%96%D7%94%20%D7%91%D7%A9%D7%93%D7%94%20%D7%A2%D7%93%D7%9B%D7%95%D7%9F%202022.pdf\";\n    let token= \"?alt=media&token=94588795-6226-42ad-9f78-7cdb49792ce3\"\n    let url = firebaseStorageApi + topic + \"%2F\" + material +  \".pdf\" + token\n    return url\n  }\n  let url = \"https://storage.googleapis.com/medicbook-ios.appspot.com/Anatomy/%D7%94%D7%92%D7%99%D7%A9%D7%94%20%D7%9C%D7%A4%D7%A6%D7%99%D7%A2%D7%95%D7%AA%20%D7%97%D7%96%D7%94%20%D7%91%D7%A9%D7%93%D7%94%20%D7%A2%D7%93%D7%9B%D7%95%D7%9F%202022.pdf\"\n  var list = []\n  for(let i = 0; i<30 ; i++){\n    list.push(i)\n  }\n  console.log(list)\n\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n\n  function onDocumentLoadSuccess({ numPages }) {\n    setNumPages(numPages);\n  }\n  let randBlue = Math.floor(Math.random() * 256)\n  let randRed = Math.floor(Math.random() * 256)\n  let randGreen = Math.floor(Math.random() * 256)\n\n  let index = 7\n  console.log(\n  'rgb(' + (256 - randBlue * (1 - index / list.length)).toString() + \",\" + (256 - randRed * ( 1 - index / list.length)).toString() + \",\" + ( 256 - randGreen * ( 1 - index / list.length)).toString()  + \")\"\n  )\n  function toString2(item){\n    console.log(item)\n    return \"\"\n  }\n\n  const springInAnimated = useRef(new Animated.Value(0)).current;\n  function startAnimation(){\n    \n    Animated.timing(springInAnimated, {\n      toValue: 100,\n      useNativeDriver: false,\n      Duration: 5000,\n    }).start();\n  }\n  ///\n  ///\n  ///\n  const [scrollState, setScrollState] = useState(0)\n  let listRendered = [0,1,2,3,4,5,6,7,8,9,10, 11, 12, 13, 14, 15]\n  let materialList = React.createRef()\n  \n\n  function handleScroll(event){\n    console.log(event.nativeEvent.contentOffset.y)\n    materialList.measure((fx, fy, width, height, px, py) => \n    {\n      console.log('Component width is: ' + width)\n      console.log('Component height is: ' + height)\n      console.log('X offset to frame: ' + fx)\n      console.log('Y offset to frame: ' + fy)\n      console.log('X offset to page: ' + px)\n      console.log('Y offset to page: ' + py)\n\n    })\n    setScrollState(event.nativeEvent.contentOffset.y)\n  }\n\n\n  \n  \n\n  return(\n      <View style={{width: '100%', height: '50%'}}>\n        <FlatList\n          ref = {materialList}\n          onScroll={handleScroll}\n          style={{ width: '100%', height:\"100%\"}}\n          data={listRendered}\n          \n          inverted\n          renderItem={(({item,index}) => {return(<View style={{width: '60%', aspectRatio: 5,\n          backgroundColor: 'yellow', marginBottom: 5, borderRadius: 20, marginLeft: 'auto', \n          marginRight: 'auto',\n          opacity: (index / listRendered.length) * 3 / 4 + 0.25  }}>\n          <Text>item: {item}</Text>\n        </View>)}) }>\n        \n\n        </FlatList>\n      </View>\n\n  );\n  \n    \n  return (\n    {/**\n       <SafeAreaView style={styles.container}>\n      <TouchableOpacity style={styles.selectButton} onPress={pickImage}>\n        <Text style={styles.buttonText}>Pick an image</Text>\n      </TouchableOpacity>\n      \n      {image !== null ? (\n        <Image source={{ uri: image.uri }} style={styles.imageBox} />\n      ) : null}\n\n      <TouchableOpacity style={styles.uploadButton} onPress={uploadImage}>\n        <Text style={styles.buttonText}>Upload image</Text>\n      </TouchableOpacity>\n\n    \n    \n    \n      </SafeAreaView>*/},\n\n      \n\n\n\n\n      <View style={{width: '100%', height: '100%', flexGrow: 1, flexDirection: 'row'}}>\n\n        \n        {/*<iframe style={{width: '100%', height: '100%'}} src={\"https://docs.google.com/viewer?url=\" + \n         url + \n        \"&embedded=true\"}/>\n\n        <iframe style={{width: '100%', height: '100%'}} src={\n        url}/> */}\n          <View style={styles.left}>\n            <FlatList\n                        style={[styles.list]}\n                        data={list}\n                        key= { (_, index) => index}\n                        initialNumToRender ={40}\n                        renderItem= {({index, item}) => \n                          <Animated.View styles={{right: springInAnimated}}>\n                            <ButtonComp num={item} key={index} \n                              bgc= {\"rgb(\" + randBlue.toString() + \",\" + (256 - randRed * ( 1 - index / list.length)).toString() + \",\" + ( 256 - randGreen * ( 1 - index / list.length)).toString()  + \")\"}/>\n                          </Animated.View>\n                      \n                      }>\n                        \n      \n\n\n              </FlatList>   \n              <Animated.View style={{backgrounColor: 'yellow', width: 150, height: 150, transform: [{translateX: springInAnimated}]}}>\n                <View style={{backgrounColor: 'yellow', width: 150, height: 150}}>\n\n                </View>\n\n\n          </Animated.View>     \n          </View>\n          <TouchableOpacity style={{height: \"10%\", width: \"30%\", backgroundColor: 'cyan'}} onPress={startAnimation}>\n\n          </TouchableOpacity>\n          \n          \n          \n\n          \n        \n          \n        \n        \n        \n          \n      \n\n      </View>\n     \n      \n  );\n}\n\nconst styles = StyleSheet.create({\n  left: {\n    backgroundColor: 'black',\n    flex: 1,\n    left: 0,\n  },\n  right: {\n    backgroundColor: 'right',\n    flex: 1,\n    right: 0,\n    height: '100%',\n  },\n  list: {\n    height: '100%',\n  },\n  \n  \n  container: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: '#bbded6'\n  },\n  selectButton: {\n    borderRadius: 5,\n    width: 150,\n    height: 50,\n    backgroundColor: '#8ac6d1',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  uploadButton: {\n    borderRadius: 5,\n    width: 150,\n    height: 50,\n    backgroundColor: '#ffb6b9',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 20\n  },\n  buttonText: {\n    color: 'white',\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  imageContainer: {\n    marginTop: 30,\n    marginBottom: 50,\n    alignItems: 'center'\n  },\n  progressBarContainer: {\n    marginTop: 20\n  },\n  imageBox: {\n    width: 300,\n    height: 300\n  }\n});","import React from 'react';\nimport { StatusBar } from 'react-native';\nimport UploadScreen from './UploadScreen';\n\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n\n\n\nconst App = () => {\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" />\n      <UploadScreen />\n      \n    </>\n  );\n};\nexport default App;"],"sourceRoot":""}